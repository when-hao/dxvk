name: Artifacts (Package)

on: push

jobs:
  artifacts-mingw-w64:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      id: checkout-code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup problem matcher
      uses: Joshua-Ashton/gcc-problem-matcher@v3

    - name: shell
      run : |
           sudo apt update
           sudo apt install wget clang meson glslang-dev glslang-tools git wine libunwind-dev base bash build-essential sed git tar curl wget bash gzip sudo file gawk grep bzip2 systemd findutils diffutils coreutils procps util-linux libxcb-util1 libxcb1-dev libglfw3
    - name: search
      run: |
           #sudo apt update
           #sudo apt search mingw
           #sudo apt search msvc
    - name: Build release
      id: build-release
      #uses: Joshua-Ashton/arch-mingw-github-action@v8
      #with:
      #  command: |
      run: |
          #sudo update-alternatives --remove x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-win32
          #sudo update-alternatives --remove x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-win32
          #sudo update-alternatives --remove i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-g++-win32
          #sudo update-alternatives --remove i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-win32
          wget https://github.com/mstorsjo/llvm-mingw/releases/download/20241203/llvm-mingw-20241203-ucrt-ubuntu-20.04-x86_64.tar.xz
          tar xf llvm-mingw-20241203-ucrt-ubuntu-20.04-x86_64.tar.xz
          export PATH="$PWD/llvm-mingw-20241203-ucrt-ubuntu-20.04-x86_64/bin:$PATH" LD_LIBRARY_PATH="$PWD/llvm-mingw-20241203-ucrt-ubuntu-20.04-x86_64/lib"
          ls -l llvm-mingw-20241203-ucrt-ubuntu-20.04-x86_64/bin
          #sh -x -c "which pacman;pacman -Sy;pacman -Ss mingw;pacman -Ss msvc;" 2>&1
          #x86_64-w64-mingw32-clang
          export VERSION_NAME="${GITHUB_REF##*/}-${GITHUB_SHA##*/}"
          ./package-release.sh ${VERSION_NAME} build --no-package --64-only
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV
          
           

    - name: Upload artifacts
      id: upload-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dxvk-win-${{ env.VERSION_NAME }}
        path: build/dxvk-${{ env.VERSION_NAME }}
        if-no-files-found: error

#  artifacts-steamrt-sniper:
 #   runs-on: ubuntu-latest
  #  container: registry.gitlab.steamos.cloud/steamrt/sniper/sdk:beta

   # steps:
    #- name: Checkout code
     # id: checkout-code
 #     uses: actions/checkout@v4
  #    with:
   #     submodules: recursive
    #    fetch-depth: 0

#    - name: Setup problem matcher
 #     uses: Joshua-Ashton/gcc-problem-matcher@v3

  #  - name: Build release
   #   id: build-release
    #  shell: bash
     # run: |
      #  export VERSION_NAME="${GITHUB_REF##*/}-${GITHUB_SHA##*/}"
       # ./package-native.sh ${VERSION_NAME} build
        #echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV

  #  - name: Upload artifacts
   #   id: upload-artifacts
    #  uses: actions/upload-artifact@v4
     # with:
      #  name: dxvk-native-${{ env.VERSION_NAME }}
       # path: build/dxvk-native-${{ env.VERSION_NAME }}.tar.gz
        #if-no-files-found: error

 # merge-artifacts:
 #   runs-on: ubuntu-latest
  #  needs: [artifacts-mingw-w64, artifacts-steamrt-sniper]
   # steps:
    #  - name: Get version
     #   id: get-version
      #  shell: bash
       # run: |
        #  echo "VERSION_NAME=${GITHUB_REF##*/}-${GITHUB_SHA##*/}" >> $GITHUB_ENV

    #  - name: Merge Artifacts
      #  uses: actions/upload-artifact@v4
     #   with:
       #   name: dxvk-${{ env.VERSION_NAME }}
        #  pattern: dxvk*
          #delete-merged: true
